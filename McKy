# https://github.com/sm86/McKinsey-Analytics-Hackathon/blob/master/DataPreparation.R

library(Rtsne)
library(reshape)
library(reshape2)
library(tidyr)
library(lubridate)
library(forecast)
library(pROC)
library(xgboost)
library(Metrics)

train <- read.csv("D:\\AA\\train_ZoGVYWq.csv",stringsAsFactors = F)
test <- read.csv("D:\\AA\\test_66516Ee.csv",stringsAsFactors = F)
submission <- read.csv("D:\\AA\\sample_submission_sLex1ul.csv",stringsAsFactors = F)
inc_lookup <- read.csv("D:\\AA\\incentive_lookup.csv",stringsAsFactors = F)
#train$DateTime <- ymd_hms(train$DateTime)

###### EXPLORATION
mean(train[,13])
0.93741
mean(train[is.na(train$application_underwriting_score),13])
mean(train$application_underwriting_score,na.rm=T)
cor(test$Count_3.6_months_late,test$application_underwriting_score)
#-0.09017303

###### NA fill
 (nrow(train)*mean(train$application_underwriting_score)+nrow(test)*mean(test$application_underwriting_score))/(nrow(train)+nrow(test))
#99.06567
train$application_underwriting_score[is.na(train$application_underwriting_score)] <- mean(train$application_underwriting_score, na.rm=T)
train$Count_3.6_months_late[is.na(train$Count_3.6_months_late)] <- 0
train$Count_6.12_months_late[is.na(train$Count_6.12_months_late)] <- 0
train$Count_more_than_12_months_late[is.na(train$Count_more_than_12_months_late)] <- 0
test$application_underwriting_score[is.na(test$application_underwriting_score)] <- mean(test$application_underwriting_score, na.rm=T)
test$Count_3.6_months_late[is.na(test$Count_3.6_months_late)] <- 0
test$Count_6.12_months_late[is.na(test$Count_6.12_months_late)] <- 0
test$Count_more_than_12_months_late[is.na(test$Count_more_than_12_months_late)] <- 0

#### FEATURES
train <- transform(train, sourcing_A = ifelse(sourcing_channel=='A', 1, 0))
train <- transform(train, sourcing_B = ifelse(sourcing_channel=='B', 1, 0))
train <- transform(train, sourcing_C = ifelse(sourcing_channel=='C', 1, 0))
train <- transform(train, sourcing_D = ifelse(sourcing_channel=='D', 1, 0))
train$sourcing_channel <- NULL
train <- transform(train, residence_area_type = ifelse(residence_area_type=='Urban', 1, 0))
test <- transform(test, sourcing_A = ifelse(sourcing_channel=='A', 1, 0))
test <- transform(test, sourcing_B = ifelse(sourcing_channel=='B', 1, 0))
test <- transform(test, sourcing_C = ifelse(sourcing_channel=='C', 1, 0))
test <- transform(test, sourcing_D = ifelse(sourcing_channel=='D', 1, 0))
test$sourcing_channel <- NULL
test <- transform(test, residence_area_type = ifelse(residence_area_type=='Urban', 1, 0))

  
######## XGB #########################################

test_target <- data.frame(target=train[c(50001:79583),c('renewal')])
test <- train[c(50001:79583),c('perc_premium_paid_by_cash_credit','age_in_days','Income',
  'Count_3.6_months_late','Count_6.12_months_late','Count_more_than_12_months_late','application_underwriting_score',
  'no_of_premiums_paid','residence_area_type','premium','sourcing_A','sourcing_B','sourcing_C','sourcing_D')]

train_target <- data.frame(target=train[c(1:50001),c('renewal')])
train <- train[c(1:50001),c('perc_premium_paid_by_cash_credit','age_in_days','Income',
  'Count_3.6_months_late','Count_6.12_months_late','Count_more_than_12_months_late','application_underwriting_score',
  'no_of_premiums_paid','residence_area_type','premium','sourcing_A','sourcing_B','sourcing_C','sourcing_D')]
  

## Making a small validation set to analyze progress
h <-sample(nrow(train_target),1000)
dval   <-xgb.DMatrix(data=data.matrix(train[h,]),label=train_target$target[h])
dtrain <-xgb.DMatrix(data=data.matrix(train[-h,]),label=train_target$target[-h])
cat("start training a model \n")
set.seed(3322)
xgb_watchlist <-list(val=dval,train=dtrain)
xgb_params <- list(  objective           = "binary:logistic",  
                     booster = "gbtree",
                     eval_metric = "auc",
                     eta                 = 0.02,  
                     max_depth           = 4,  
                     subsample           = 0.6,     
                     colsample_bytree    = 0.6,
                     min_child_weight = 1
)

xgb_model <- xgb.train(
  params              = xgb_params, 
  data                = dtrain, 
  nrounds             = 420,
  verbose             = 1,  #0 if full training set and no watchlist provided
  watchlist           = xgb_watchlist,
  print_every_n       = 20,
  maximize            = FALSE
)
#####[421]	val-auc:0.842924	train-auc:0.861897 
###### train error

pred_test <- predict(xgb_model, data.matrix(test))
auc(data.matrix(test_target), data.matrix(pred_test))
#### 0.8433

#error <- data.frame(err=pred_xgb-train_target$target)
#plot(error$err)

# Compute feature importance matrix
importance_matrix <- xgb.importance(colnames(train), model = xgb_model)
xgb.plot.importance(importance_matrix[1:10,])

#########  XGB whole sample

test <- test[,c('perc_premium_paid_by_cash_credit','age_in_days','Income',
  'Count_3.6_months_late','Count_6.12_months_late','Count_more_than_12_months_late','application_underwriting_score',
  'no_of_premiums_paid','residence_area_type','premium','sourcing_A','sourcing_B','sourcing_C','sourcing_D')]
 
xgb_model_420 <- xgb.train(
    params              = xgb_params, 
    data                = dtrain, 
    nrounds             = 420,
    verbose             = 0,  #0 if full training set and no watchlist provided
    watchlist           = xgb_watchlist,
    print_every_n       = 20,
    maximize            = FALSE
)

pred_submit_420 <- predict(xgb_model_420, data.matrix(test))
submission$renewal<-pred_submit_420
write.csv(submission, "D:\\AA\\submission_420.csv")

### optimal incentive   ############################

premium <- test$premium[i]   #/100 percentage????
baseprob <- submission$renewal[i]
i_opt <- 0

for (p in 1:60000) {
    premium <- p
    opt_i <- 0
    inc_lookup$opt_i[i] <- opt_i
for (i in 1:3000) {
    
    effort <- 10*(1-exp(-i/400))
    dprob <- 20*(1-exp(-effort/5))
    diff <- exp(-effort/5)*4  *exp(-i/400)/40 * premium -1
    if (diff > 0) {i_opt <- i}
}
inc_lookup$opt_i[p] <- opt_i
}
write.csv(inc_lookup, "D:\\AA\\incentive_lookup.csv")







######## inc lookup table
for (p in 1:60000) {
    premium <- p
    opt_i <- 0
    inc_lookup$opt_i[i] <- opt_i
for (i in 1:3000) {
    
    effort <- 10*(1-exp(-i/400))
    dprob <- 20*(1-exp(-effort/5))
    diff <- exp(-effort/5)*4  *exp(-i/400)/40 * premium -1
    if (diff > 0) {i_opt <- i}
}
inc_lookup$opt_i[p] <- opt_i
}
write.csv(inc_lookup, "D:\\AA\\incentive_lookup.csv")


